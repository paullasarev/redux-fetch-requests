"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var fp=require("lodash/fp"),lodash=require("lodash");const FETCH_CANCEL_REQUESTS="FETCH_CANCEL_REQUESTS";function fetchCancelRequests(){return{type:FETCH_CANCEL_REQUESTS}}const hasRequest=fp.has("request"),responseTypes=["arraybuffer","blob","formData","json","text",null];function makeSuccessType(e){return`${e}_SUCCESS`}function makeErrorType(e){return`${e}_ERROR`}function makeCancelType(e){return`${e}_CANCEL`}function getResponseData(e,t){if(-1===responseTypes.indexOf(t))throw new Error(`responseType must be one of the following: ${responseTypes.map(String).join(", ")}`);return null===t?Promise.resolve(null):e[t]()}function isAbortError(e){return"AbortError"===e.name}async function fetchData(e,t,r){const{fetchInstance:n,baseUrl:a,abortController:s,onRequest:o,onSuccess:c,onError:u,onCancel:l}=r,{request:{url:i,responseType:p="json",isCancellable:d=!0,...f},meta:E}=e;try{const r=d&&s?{signal:s.signal}:void 0,u=lodash.isFunction(o)?o(f,e,t):f,l=await n(`${a}${i}`,{...r,...u});if(l.ok){l.data=await getResponseData(l,p);const r=lodash.isFunction(c)?c(l,e,t):l;return t({type:makeSuccessType(e.type),response:r,data:r.data,meta:E})}try{l.data=await l.json()}catch(e){}throw l}catch(r){const n=isAbortError(r),a=n?makeCancelType(e.type):makeErrorType(e.type),s=n?l:u;return lodash.isFunction(s)&&s(r,e,t),t({type:a,error:r,meta:E})}}function createMiddleware(e){const{fetchInstance:t=fetch,baseUrl:r="/",abortController:n=new AbortController,onRequest:a,onSuccess:s,onError:o,onCancel:c,cancelOn:u=[FETCH_CANCEL_REQUESTS]}=e;return({dispatch:e})=>l=>i=>lodash.isArray(u)&&u.indexOf(i.type)>=0?(n.abort(),l(i)):lodash.isFunction(u)&&u(i)?(n.abort(),l(i)):hasRequest(i)?fetchData(i,e,{fetchInstance:t,baseUrl:r,abortController:n,onRequest:a,onSuccess:s,onError:o,onCancel:c}):l(i)}const defaultState=(e={})=>{const{getDefaultData:t,multiple:r=!1}=e;let n=r?[]:null;return lodash.isFunction(t)&&(n=t(e)),{data:n,error:null,pending:0}};function requestsReducer(e={}){const{actionType:t="UNKNOWN_ACTION",getData:r,getError:n,resetOn:a}=e,s=makeSuccessType(t),o=makeErrorType(t),c=makeCancelType(t);return(u,l)=>{let i=u;switch(lodash.isUndefined(u)&&(i=defaultState(e)),lodash.isArray(a)&&a.indexOf(l.type)>=0&&(i=defaultState(e)),lodash.isFunction(a)&&a(l)&&(i=defaultState(e)),l.type){case t:return{...i,pending:i.pending+1};case s:{const t=lodash.isFunction(r)?r(i,l,e):l.data;return{...i,data:t,pending:i.pending-1}}case c:case o:{const t=lodash.isFunction(n)?n(i,l,e):l.error;return{...i,error:t,pending:i.pending-1}}default:return i}}}exports.FETCH_CANCEL_REQUESTS=FETCH_CANCEL_REQUESTS,exports.createMiddleware=createMiddleware,exports.defaultState=defaultState,exports.fetchCancelRequests=fetchCancelRequests,exports.fetchData=fetchData,exports.getResponseData=getResponseData,exports.isAbortError=isAbortError,exports.makeCancelType=makeCancelType,exports.makeErrorType=makeErrorType,exports.makeSuccessType=makeSuccessType,exports.requestsReducer=requestsReducer;
